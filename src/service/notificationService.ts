import messaging from '@react-native-firebase/messaging';
import {Platform} from 'react-native';
import PushNotificationIOS from '@react-native-community/push-notification-ios';
import PushNotification from 'react-native-push-notification';
import AsyncStorage from '@react-native-async-storage/async-storage';
import {requestNotifications} from 'react-native-permissions';

const requestNotificationPermission = async () => {
  try {
    if (Platform.OS === 'android') {
      requestNotifications(['alert', 'sound']).then(({status, settings}) => {
        console.log(status, settings);
      });
      const authStatus = await messaging().requestPermission();
      const enabled =
        authStatus === messaging.AuthorizationStatus.AUTHORIZED ||
        authStatus === messaging.AuthorizationStatus.PROVISIONAL;
      if (enabled) {
        console.log('Authorization status:', authStatus);
        return true;
      }
    } else {
      const authorizationStatus = await messaging().requestPermission({
        providesAppNotificationSettings: true,
      });
      if (authorizationStatus === messaging.AuthorizationStatus.AUTHORIZED) {
        console.log('User has notification permissions enabled.');
        return true;
      } else if (
        authorizationStatus === messaging.AuthorizationStatus.PROVISIONAL
      ) {
        console.log('User has provisional notification permissions.');
      } else {
        console.log('User has notification permissions disabled');
      }
      return false;
    }
  } catch (error) {
    console.error(error);
  }
};

const createNotificationChanel = () => {
  PushNotification.createChannel(
    {
      channelId: 'channel-id', // (required)
      channelName: 'My channel', // (required)
    },
    (created: any) => console.log(`createChannel returned '${created}'`), // (optional) callback returns whether the channel was created, false means it already existed.
  );
};

const checkNoticationPermission = async () => {
  const permission = await messaging().hasPermission();
  return permission;
};

const getFCMToken = async () => {
  const token = await messaging().getToken();
  await AsyncStorage.setItem('FCM_Token', token);
  return token;
};

const onFCMMessage = () => {
  const unsubscribe = messaging().onMessage(remoteMessage => {
    if (Platform.OS === 'android') {
      PushNotification.localNotification({
        /* Android Only Properties */
        channelId: 'channel-id', // (required) channelId, if the channel doesn't exist, notification will not trigger.
        /* iOS and Android properties */
        id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        title: remoteMessage.notification?.title, // (optional)
        message: remoteMessage.notification?.body, // (required)
      });
    } else {
      PushNotificationIOS.addNotificationRequest({
        id: '0',
        title: remoteMessage.notification?.title, // (optional)
        body: remoteMessage.notification?.body, // (required)
      });
    }
  });
  return unsubscribe;
};

const onNotificationOpened = () => {
  messaging().onNotificationOpenedApp(remoteMessage => {
    console.log('onNotificationOpenedApp => ', remoteMessage);
  });
};

const setBackgroundMessageHandler = () => {
  messaging().setBackgroundMessageHandler(async remoteMessage => {
    console.log('Message handled in the background!', remoteMessage);
  });
};

export {
  requestNotificationPermission,
  checkNoticationPermission,
  getFCMToken,
  onFCMMessage,
  onNotificationOpened,
  setBackgroundMessageHandler,
  createNotificationChanel,
};
